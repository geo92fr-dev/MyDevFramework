#!/usr/bin/env node

/**
 * @criticality HIGH
 * @depends LOG_POSTMORTEM.md, fs, path
 * @description Syst√®me d'apprentissage automatique bas√© sur l'analyse des post-mortem
 * @phase ALL - Am√©lioration continue
 * @category learning
 */

const fs = require('fs');
const path = require('path');

class PostMortemLearningSystem {
    constructor() {
        this.projectRoot = process.cwd();
        this.postMortemFile = path.join(this.projectRoot, 'LOG_POSTMORTEM.md');
        this.patternsFile = path.join(this.projectRoot, 'PATTERNS_LEARNED.json');
        this.improvementsFile = path.join(this.projectRoot, 'IMPROVEMENTS_SUGGESTED.md');
        this.patterns = this.loadExistingPatterns();
        this.learningData = {
            errorFrequency: {},
            solutionEffectiveness: {},
            timeToResolution: {},
            recurrencePatterns: []
        };
    }

    /**
     * Chargement des patterns existants
     */
    loadExistingPatterns() {
        if (fs.existsSync(this.patternsFile)) {
            try {
                return JSON.parse(fs.readFileSync(this.patternsFile, 'utf8'));
            } catch (error) {
                console.warn('‚ö†Ô∏è Erreur lecture patterns existants, initialisation vide');
                return this.getDefaultPatterns();
            }
        }
        return this.getDefaultPatterns();
    }

    /**
     * Patterns par d√©faut
     */
    getDefaultPatterns() {
        return {
            version: "1.0",
            lastAnalysis: null,
            errorPatterns: {},
            solutionPatterns: {},
            preventionRules: [],
            qualityImprovements: [],
            learningMetrics: {
                totalIncidents: 0,
                resolvedIncidents: 0,
                averageResolutionTime: 0,
                recurrenceRate: 0,
                improvementsSuggested: 0,
                improvementsImplemented: 0
            }
        };
    }

    /**
     * Analyse compl√®te du post-mortem
     */
    async analyzePostMortem() {
        console.log('üß† D√©marrage analyse Post-Mortem Auto-Apprenante...');
        
        if (!fs.existsSync(this.postMortemFile)) {
            console.log('üìã Aucun post-mortem trouv√©, initialisation du syst√®me');
            await this.initializePostMortem();
            return;
        }

        const postMortemContent = fs.readFileSync(this.postMortemFile, 'utf8');
        
        // √âtape 1: Extraction des incidents
        const incidents = this.extractIncidents(postMortemContent);
        console.log(`üìä ${incidents.length} incidents d√©tect√©s pour analyse`);

        // √âtape 2: Analyse des patterns
        await this.analyzeErrorPatterns(incidents);
        
        // √âtape 3: √âvaluation de l'efficacit√© des solutions
        await this.analyzeSolutionEffectiveness(incidents);
        
        // √âtape 4: D√©tection de r√©currence
        await this.detectRecurrencePatterns(incidents);
        
        // √âtape 5: G√©n√©ration des am√©liorations
        const improvements = await this.generateImprovements();
        
        // √âtape 6: Mise √† jour des patterns
        await this.updatePatterns(improvements);
        
        // √âtape 7: G√©n√©ration du rapport d'apprentissage
        await this.generateLearningReport(improvements);
        
        console.log('‚úÖ Analyse Post-Mortem termin√©e avec succ√®s');
    }

    /**
     * Extraction des incidents depuis le post-mortem
     */
    extractIncidents(content) {
        const incidents = [];
        
        // Pattern pour d√©tecter les incidents
        const incidentRegex = /## \[([^\]]+)\] - (.+?)\n\n### üéØ Contexte\n- \*\*Phase\*\* : (.+?)\n- \*\*Composant\*\* : (.+?)\n- \*\*D√©clencheur\*\* : (.+?)\n\n### üîç Analyse Racine\n- \*\*Sympt√¥me\*\* : (.+?)\n- \*\*Cause Premi√®re\*\* : (.+?)\n- \*\*Point de D√©faillance\*\* : (.+?)\n\n### üí° Solution Appliqu√©e\n- \*\*Fix Imm√©diat\*\* : (.+?)\n- \*\*Fix Structurel\*\* : (.+?)\n- \*\*Pr√©vention\*\* : (.+?)\n/gs;
        
        let match;
        while ((match = incidentRegex.exec(content)) !== null) {
            incidents.push({
                timestamp: match[1],
                title: match[2],
                phase: match[3],
                component: match[4],
                trigger: match[5],
                symptom: match[6],
                rootCause: match[7],
                failurePoint: match[8],
                immediateFix: match[9],
                structuralFix: match[10],
                prevention: match[11],
                date: new Date(match[1])
            });
        }
        
        return incidents;
    }

    /**
     * Analyse des patterns d'erreurs
     */
    async analyzeErrorPatterns(incidents) {
        console.log('üîç Analyse des patterns d\'erreurs...');
        
        for (const incident of incidents) {
            // Categorisation automatique
            const category = this.categorizeError(incident);
            const phase = incident.phase;
            const component = incident.component;
            
            // Comptage des fr√©quences
            if (!this.learningData.errorFrequency[category]) {
                this.learningData.errorFrequency[category] = 0;
            }
            this.learningData.errorFrequency[category]++;
            
            // Patterns par phase
            if (!this.patterns.errorPatterns[phase]) {
                this.patterns.errorPatterns[phase] = {};
            }
            if (!this.patterns.errorPatterns[phase][category]) {
                this.patterns.errorPatterns[phase][category] = {
                    count: 0,
                    symptoms: [],
                    causes: [],
                    components: []
                };
            }
            
            this.patterns.errorPatterns[phase][category].count++;
            this.patterns.errorPatterns[phase][category].symptoms.push(incident.symptom);
            this.patterns.errorPatterns[phase][category].causes.push(incident.rootCause);
            this.patterns.errorPatterns[phase][category].components.push(component);
        }
        
        console.log(`üìä Patterns identifi√©s: ${Object.keys(this.learningData.errorFrequency).length} cat√©gories`);
    }

    /**
     * Cat√©gorisation automatique des erreurs
     */
    categorizeError(incident) {
        const trigger = incident.trigger.toLowerCase();
        const symptom = incident.symptom.toLowerCase();
        const cause = incident.rootCause.toLowerCase();
        
        // Tests et validation
        if (trigger.includes('test') || symptom.includes('test') || cause.includes('test')) {
            return 'testing';
        }
        
        // Build et compilation
        if (trigger.includes('build') || symptom.includes('compilation') || cause.includes('typescript')) {
            return 'build';
        }
        
        // Qualit√© de code
        if (trigger.includes('lint') || symptom.includes('style') || cause.includes('format')) {
            return 'code-quality';
        }
        
        // Configuration
        if (trigger.includes('config') || symptom.includes('configuration') || cause.includes('environment')) {
            return 'configuration';
        }
        
        // S√©curit√©
        if (trigger.includes('audit') || symptom.includes('vulnerability') || cause.includes('security')) {
            return 'security';
        }
        
        // D√©pendances
        if (trigger.includes('dependency') || symptom.includes('module') || cause.includes('package')) {
            return 'dependencies';
        }
        
        // Authentication
        if (trigger.includes('auth') || symptom.includes('login') || cause.includes('firebase')) {
            return 'authentication';
        }
        
        return 'general';
    }

    /**
     * Analyse de l'efficacit√© des solutions
     */
    async analyzeSolutionEffectiveness(incidents) {
        console.log('üí° Analyse efficacit√© des solutions...');
        
        for (const incident of incidents) {
            const solutionType = this.categorizeSolution(incident);
            
            if (!this.learningData.solutionEffectiveness[solutionType]) {
                this.learningData.solutionEffectiveness[solutionType] = {
                    used: 0,
                    successful: 0,
                    averageTime: 0
                };
            }
            
            this.learningData.solutionEffectiveness[solutionType].used++;
            
            // Heuristique simple pour d√©terminer le succ√®s
            // (dans un vrai syst√®me, on trackrait les r√©currences)
            if (!this.isRecurrentError(incident)) {
                this.learningData.solutionEffectiveness[solutionType].successful++;
            }
        }
    }

    /**
     * Cat√©gorisation des solutions
     */
    categorizeSolution(incident) {
        const fix = incident.immediateFix.toLowerCase() + ' ' + incident.structuralFix.toLowerCase();
        
        if (fix.includes('test') || fix.includes('coverage')) return 'testing-improvement';
        if (fix.includes('format') || fix.includes('lint')) return 'code-formatting';
        if (fix.includes('config') || fix.includes('setup')) return 'configuration-fix';
        if (fix.includes('dependency') || fix.includes('install')) return 'dependency-management';
        if (fix.includes('refactor') || fix.includes('restructure')) return 'code-refactoring';
        if (fix.includes('documentation') || fix.includes('comment')) return 'documentation-update';
        
        return 'general-fix';
    }

    /**
     * D√©tection des patterns de r√©currence
     */
    async detectRecurrencePatterns(incidents) {
        console.log('üîÑ D√©tection patterns de r√©currence...');
        
        const errorGroups = {};
        
        for (const incident of incidents) {
            const key = this.generateErrorSignature(incident);
            
            if (!errorGroups[key]) {
                errorGroups[key] = [];
            }
            errorGroups[key].push(incident);
        }
        
        // Identifier les erreurs r√©currentes
        for (const [signature, occurrences] of Object.entries(errorGroups)) {
            if (occurrences.length > 1) {
                this.learningData.recurrencePatterns.push({
                    signature,
                    count: occurrences.length,
                    incidents: occurrences,
                    avgTimeBetween: this.calculateAverageTimeBetween(occurrences),
                    category: this.categorizeError(occurrences[0])
                });
            }
        }
        
        console.log(`üîÑ ${this.learningData.recurrencePatterns.length} patterns r√©currents d√©tect√©s`);
    }

    /**
     * G√©n√©ration signature d'erreur pour d√©tection r√©currence
     */
    generateErrorSignature(incident) {
        // Signature bas√©e sur composant + cause + type d'erreur
        const category = this.categorizeError(incident);
        const component = incident.component;
        const simplifiedCause = incident.rootCause.toLowerCase()
            .replace(/[0-9]+/g, 'X') // Remplacer nombres par X
            .replace(/\s+/g, '_')    // Espaces en underscores
            .substring(0, 50);       // Limiter la longueur
        
        return `${category}_${component}_${simplifiedCause}`;
    }

    /**
     * Calcul temps moyen entre occurrences
     */
    calculateAverageTimeBetween(incidents) {
        if (incidents.length < 2) return 0;
        
        const sortedIncidents = incidents.sort((a, b) => a.date - b.date);
        let totalTime = 0;
        
        for (let i = 1; i < sortedIncidents.length; i++) {
            totalTime += sortedIncidents[i].date - sortedIncidents[i-1].date;
        }
        
        return totalTime / (sortedIncidents.length - 1);
    }

    /**
     * V√©rification si une erreur est r√©currente
     */
    isRecurrentError(incident) {
        const signature = this.generateErrorSignature(incident);
        return this.learningData.recurrencePatterns.some(pattern => 
            pattern.signature === signature && pattern.count > 1
        );
    }

    /**
     * G√©n√©ration des am√©liorations sugg√©r√©es
     */
    async generateImprovements() {
        console.log('üöÄ G√©n√©ration am√©liorations sugg√©r√©es...');
        
        const improvements = [];
        
        // Am√©liorations bas√©es sur fr√©quence d'erreurs
        for (const [category, frequency] of Object.entries(this.learningData.errorFrequency)) {
            if (frequency >= 3) { // Seuil de fr√©quence
                improvements.push({
                    type: 'prevention',
                    priority: frequency >= 5 ? 'HIGH' : 'MEDIUM',
                    category: category,
                    description: this.generatePreventionRule(category, frequency),
                    implementation: this.generateImplementationPlan(category),
                    impact: `R√©duction estim√©e de ${Math.round(frequency * 0.7)} incidents futurs`
                });
            }
        }
        
        // Am√©liorations bas√©es sur r√©currence
        for (const pattern of this.learningData.recurrencePatterns) {
            if (pattern.count >= 2) {
                improvements.push({
                    type: 'automation',
                    priority: pattern.count >= 3 ? 'HIGH' : 'MEDIUM',
                    category: pattern.category,
                    description: `Automatiser la pr√©vention des erreurs r√©currentes: ${pattern.signature}`,
                    implementation: this.generateAutomationPlan(pattern),
                    impact: `√âlimination de ${pattern.count} occurrences similaires`
                });
            }
        }
        
        // Am√©liorations des quality gates
        improvements.push(...this.generateQualityGateImprovements());
        
        // Am√©liorations de documentation
        improvements.push(...this.generateDocumentationImprovements());
        
        console.log(`üí° ${improvements.length} am√©liorations g√©n√©r√©es`);
        return improvements;
    }

    /**
     * G√©n√©ration r√®gle de pr√©vention
     */
    generatePreventionRule(category, frequency) {
        const rules = {
            'testing': `Ajouter gate de couverture obligatoire > 85% (${frequency} √©checs d√©tect√©s)`,
            'build': `Validation TypeScript stricte en pre-commit (${frequency} erreurs compilation)`,
            'code-quality': `Auto-formatage forc√© avant commit (${frequency} probl√®mes style)`,
            'configuration': `Validation environnement au d√©marrage (${frequency} erreurs config)`,
            'security': `Audit s√©curit√© automatique hebdomadaire (${frequency} vuln√©rabilit√©s)`,
            'dependencies': `Monitoring d√©pendances avec alerts (${frequency} probl√®mes deps)`,
            'authentication': `Tests auth automatiques en CI/CD (${frequency} √©checs auth)`
        };
        
        return rules[category] || `Am√©liorer validation pour ${category} (${frequency} incidents)`;
    }

    /**
     * G√©n√©ration plan d'impl√©mentation
     */
    generateImplementationPlan(category) {
        const plans = {
            'testing': [
                'Ajouter script npm run test:coverage:enforce',
                'Modifier quality-gates.js pour bloquer si < 85%',
                'Ajouter hook pre-commit pour validation couverture'
            ],
            'build': [
                'Configurer TypeScript strict mode',
                'Ajouter tsc --noEmit en pre-commit',
                'Cr√©er script de validation build en CI'
            ],
            'code-quality': [
                'Configurer prettier en pre-commit hook',
                'Ajouter eslint --fix automatique',
                'Bloquer commit si style non conforme'
            ],
            'configuration': [
                'Cr√©er script check-env.js',
                'Valider variables environnement au startup',
                'Documenter configuration requise'
            ],
            'security': [
                'Scheduler npm audit automatique',
                'Configurer Snyk ou √©quivalent',
                'Alertes automatiques vuln√©rabilit√©s'
            ],
            'dependencies': [
                'Monitoring avec renovate ou dependabot',
                'Tests automatiques mise √† jour deps',
                'Audit r√©gulier licences'
            ],
            'authentication': [
                'Tests E2E auth en CI/CD',
                'Monitoring connexions Firebase',
                'Validation tokens r√©guli√®re'
            ]
        };
        
        return plans[category] || ['Analyser cause racine', 'Impl√©menter solution', 'Tester pr√©vention'];
    }

    /**
     * G√©n√©ration plan d'automatisation
     */
    generateAutomationPlan(pattern) {
        return [
            `Cr√©er d√©tecteur automatique pour pattern: ${pattern.signature}`,
            'Ajouter validation pr√©ventive dans orchestrateur',
            'Configurer alerte proactive si pattern d√©tect√©',
            'Documenter pattern dans base de connaissances'
        ];
    }

    /**
     * Am√©liorations quality gates sugg√©r√©es
     */
    generateQualityGateImprovements() {
        const improvements = [];
        
        // Bas√© sur les patterns observ√©s
        if (this.learningData.errorFrequency.testing >= 2) {
            improvements.push({
                type: 'quality-gate',
                priority: 'HIGH',
                category: 'testing',
                description: 'Renforcer gate de couverture de tests',
                implementation: [
                    'Augmenter seuil couverture minimum de 5%',
                    'Ajouter validation branch coverage',
                    'Bloquer merge si r√©gression couverture'
                ],
                impact: 'R√©duction des bugs en production'
            });
        }
        
        if (this.learningData.errorFrequency['code-quality'] >= 2) {
            improvements.push({
                type: 'quality-gate',
                priority: 'MEDIUM',
                category: 'code-quality',
                description: 'Automatiser compl√®tement le formatage',
                implementation: [
                    'Pre-commit hook formatage obligatoire',
                    'IDE configuration automatique',
                    'CI/CD check formatage strict'
                ],
                impact: '√âlimination des probl√®mes de style'
            });
        }
        
        return improvements;
    }

    /**
     * Am√©liorations documentation sugg√©r√©es
     */
    generateDocumentationImprovements() {
        return [
            {
                type: 'documentation',
                priority: 'MEDIUM',
                category: 'automation',
                description: 'Auto-g√©n√©ration documentation patterns appris',
                implementation: [
                    'Cr√©er DOC_PATTERNS_LEARNED.md automatique',
                    'Synchroniser avec post-mortem',
                    'Alertes documentation obsol√®te'
                ],
                impact: 'Documentation toujours √† jour'
            }
        ];
    }

    /**
     * Mise √† jour des patterns
     */
    async updatePatterns(improvements) {
        this.patterns.lastAnalysis = new Date().toISOString();
        this.patterns.qualityImprovements = improvements;
        
        // Mise √† jour m√©triques
        this.patterns.learningMetrics.totalIncidents = Object.values(this.learningData.errorFrequency)
            .reduce((sum, freq) => sum + freq, 0);
        this.patterns.learningMetrics.recurrenceRate = 
            (this.learningData.recurrencePatterns.length / this.patterns.learningMetrics.totalIncidents * 100).toFixed(1);
        this.patterns.learningMetrics.improvementsSuggested = improvements.length;
        
        // Sauvegarde
        fs.writeFileSync(this.patternsFile, JSON.stringify(this.patterns, null, 2));
        console.log(`üíæ Patterns sauvegard√©s: ${this.patternsFile}`);
    }

    /**
     * G√©n√©ration rapport d'apprentissage
     */
    async generateLearningReport(improvements) {
        const report = `# üß† Rapport d'Apprentissage Post-Mortem

**Date d'analyse**: ${new Date().toISOString()}  
**Version**: ${this.patterns.version}

## üìä M√©triques d'Apprentissage

### üî¢ Statistiques Globales
- **Total incidents analys√©s**: ${this.patterns.learningMetrics.totalIncidents}
- **Patterns r√©currents**: ${this.learningData.recurrencePatterns.length}
- **Taux de r√©currence**: ${this.patterns.learningMetrics.recurrenceRate}%
- **Am√©liorations sugg√©r√©es**: ${improvements.length}

### üìà Fr√©quence d'Erreurs par Cat√©gorie
| Cat√©gorie | Fr√©quence | Criticit√© |
|-----------|-----------|-----------|
${Object.entries(this.learningData.errorFrequency)
    .sort(([,a], [,b]) => b - a)
    .map(([cat, freq]) => `| ${cat} | ${freq} | ${freq >= 5 ? 'üî¥ HIGH' : freq >= 3 ? 'üü° MEDIUM' : 'üü¢ LOW'} |`)
    .join('\n')}

## üîÑ Patterns R√©currents Critiques

${this.learningData.recurrencePatterns
    .filter(p => p.count >= 2)
    .map(pattern => `### ${pattern.category} (${pattern.count} occurrences)
- **Signature**: \`${pattern.signature}\`
- **Fr√©quence moyenne**: ${Math.round(pattern.avgTimeBetween / (1000 * 60 * 60 * 24))} jours
- **Impact**: ${pattern.count} incidents similaires`)
    .join('\n\n')}

## üí° Am√©liorations Prioritaires

### üî¥ Priorit√© HAUTE
${improvements
    .filter(imp => imp.priority === 'HIGH')
    .map(imp => `#### ${imp.category} - ${imp.description}
**Type**: ${imp.type}  
**Impact**: ${imp.impact}

**Plan d'impl√©mentation**:
${imp.implementation.map(step => `- ${step}`).join('\n')}`)
    .join('\n\n')}

### üü° Priorit√© MOYENNE  
${improvements
    .filter(imp => imp.priority === 'MEDIUM')
    .map(imp => `#### ${imp.category} - ${imp.description}
**Impact**: ${imp.impact}`)
    .join('\n\n')}

## üéØ Recommandations d'Action

### üö® Actions Imm√©diates (√Ä impl√©menter cette semaine)
${improvements
    .filter(imp => imp.priority === 'HIGH')
    .map(imp => `- [ ] **${imp.category}**: ${imp.description}`)
    .join('\n')}

### üìÖ Actions Planifi√©es (√Ä impl√©menter ce mois)
${improvements
    .filter(imp => imp.priority === 'MEDIUM')
    .map(imp => `- [ ] **${imp.category}**: ${imp.description}`)
    .join('\n')}

## üìà Pr√©dictions et Tendances

### üîÆ Risques Probables
- **R√©currence ${this.getMostRecurrentCategory()}**: Probabilit√© ${this.calculateRecurrenceProbability()}%
- **Nouvelle vuln√©rabilit√© s√©curit√©**: Bas√© sur pattern historique
- **Probl√®me dependencies**: ${this.learningData.errorFrequency.dependencies || 0} incidents r√©cents

### üéØ Objectifs d'Am√©lioration
- **R√©duction incidents**: -${Math.round(improvements.length * 0.3)} incidents/mois estim√©s
- **Temps r√©solution**: -20% avec automatisation
- **Qualit√© globale**: +15% score quality gates

## üîß Int√©gration Orchestrateur

### Scripts Recommand√©s √† Ajouter
\`\`\`bash
# Analysis automatique post-mortem
npm run analyze:postmortem

# Application am√©liorations sugg√©r√©es
npm run apply:improvements --category=testing

# Monitoring patterns r√©currents
npm run monitor:patterns --alert=high
\`\`\`

### Configuration Quality Gates Sugg√©r√©e
\`\`\`json
{
  "learningMode": true,
  "adaptiveThresholds": true,
  "patternDetection": true,
  "autoImprovement": true
}
\`\`\`

---
*G√©n√©r√© automatiquement par Post-Mortem Learning System v1.0*
*Prochaine analyse: ${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10)}*
`;

        fs.writeFileSync(this.improvementsFile, report);
        console.log(`üìã Rapport d'apprentissage g√©n√©r√©: ${this.improvementsFile}`);
    }

    /**
     * Cat√©gorie la plus r√©currente
     */
    getMostRecurrentCategory() {
        if (this.learningData.recurrencePatterns.length === 0) return 'aucune';
        
        const categoryCounts = {};
        for (const pattern of this.learningData.recurrencePatterns) {
            categoryCounts[pattern.category] = (categoryCounts[pattern.category] || 0) + pattern.count;
        }
        
        return Object.entries(categoryCounts)
            .sort(([,a], [,b]) => b - a)[0][0];
    }

    /**
     * Calcul probabilit√© de r√©currence
     */
    calculateRecurrenceProbability() {
        const totalIncidents = this.patterns.learningMetrics.totalIncidents;
        const recurrentIncidents = this.learningData.recurrencePatterns
            .reduce((sum, pattern) => sum + pattern.count, 0);
        
        if (totalIncidents === 0) return 0;
        return Math.round((recurrentIncidents / totalIncidents) * 100);
    }

    /**
     * Initialisation du syst√®me
     */
    async initializePostMortem() {
        const initialContent = `# üìù Post-Mortem Log - Apprentissage Continu

*Syst√®me d'apprentissage automatique initialis√© le ${new Date().toISOString()}*

## Instructions

Ce fichier est analys√© automatiquement par le syst√®me d'apprentissage.  
Chaque incident doit suivre ce format:

\`\`\`markdown
## [YYYY-MM-DDTHH:mm:ss] - Titre de l'incident

### üéØ Contexte
- **Phase** : [X.Y]
- **Composant** : [nom du composant]
- **D√©clencheur** : [action qui a caus√© le probl√®me]

### üîç Analyse Racine
- **Sympt√¥me** : [ce qui a √©t√© observ√©]
- **Cause Premi√®re** : [pourquoi c'est arriv√©]
- **Point de D√©faillance** : [o√π le processus a √©chou√©]

### üí° Solution Appliqu√©e
- **Fix Imm√©diat** : [correction rapide]
- **Fix Structurel** : [am√©lioration du processus]
- **Pr√©vention** : [comment √©viter la r√©currence]

### üìà Am√©lioration du CBD Sugg√©r√©e
- [ ] Nouvelle v√©rification √† ajouter
- [ ] Template √† modifier
- [ ] Script √† cr√©er/am√©liorer
- [ ] Documentation √† enrichir

### üéØ Impact et M√©triques
- **Temps de r√©solution** : [dur√©e]
- **Complexit√©** : [1-5]
- **R√©currence** : [premi√®re fois / r√©current]
\`\`\`

---

*Analyse automatique: \`npm run analyze:postmortem\`*
`;

        fs.writeFileSync(this.postMortemFile, initialContent);
        console.log(`üìã Post-mortem initialis√©: ${this.postMortemFile}`);
    }
}

// Ex√©cution
if (require.main === module) {
    const learningSystem = new PostMortemLearningSystem();
    
    learningSystem.analyzePostMortem()
        .then(() => {
            console.log('üéì Analyse d\'apprentissage termin√©e avec succ√®s');
            process.exit(0);
        })
        .catch(error => {
            console.error('üí• Erreur syst√®me d\'apprentissage:', error);
            process.exit(1);
        });
}

module.exports = PostMortemLearningSystem;
